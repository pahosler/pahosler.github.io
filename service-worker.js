"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["/pahosler.github.io/index.html","ee28698e952d4f28a63e2c069310bf01"],["/pahosler.github.io/static/css/main.7ccf4e7f.css","50415866e9953c2795df92549e943db4"],["/pahosler.github.io/static/js/main.49a3b1b5.js","fb1775cc78edf924fc5a06f9b9f4f815"],["/pahosler.github.io/static/media/calculator-screenshot.c064f0dc.png","c064f0dc46ee7b34cd714f0b6f644fee"],["/pahosler.github.io/static/media/fontawesome-webfont.0a799148.svg","0a799148a50bb02c6f380eabd8d97559"],["/pahosler.github.io/static/media/fontawesome-webfont.3293616e.woff","3293616ec0c605c7c2db25829a0a509e"],["/pahosler.github.io/static/media/fontawesome-webfont.8b27bc96.eot","8b27bc96115c2d24350f0d09e6a9433f"],["/pahosler.github.io/static/media/fontawesome-webfont.dcb26c72.ttf","dcb26c7239d850266941e80370e207c1"],["/pahosler.github.io/static/media/glyphicons-halflings-regular.448c34a5.woff2","448c34a56d699c29117adc64c43affeb"],["/pahosler.github.io/static/media/glyphicons-halflings-regular.89889688.svg","89889688147bd7575d6327160d64e760"],["/pahosler.github.io/static/media/glyphicons-halflings-regular.e18bbf61.ttf","e18bbf611f2a2e43afc071aa2f4e1512"],["/pahosler.github.io/static/media/glyphicons-halflings-regular.f4769f9b.eot","f4769f9bdb7466be65088239c12046d1"],["/pahosler.github.io/static/media/glyphicons-halflings-regular.fa277232.woff","fa2772327f55d8198301fdb8bcfc8158"],["/pahosler.github.io/static/media/jackson-square-night-2.f4c7af60.jpg","f4c7af603b48f9cfd29cff89701791d7"],["/pahosler.github.io/static/media/name-label.591fdeea.png","591fdeea59202386678a7ae307ce6ce9"],["/pahosler.github.io/static/media/new-orleans-creole-queen.af7625ab.jpg","af7625abe557c0cc425c1e8549bd340e"],["/pahosler.github.io/static/media/new-orleans-night-3.4d424c9a.jpg","4d424c9af8b0b223f4a59ae689398dc0"],["/pahosler.github.io/static/media/pahosler-1.8a60073e.jpg","8a60073e85c38fb1dd3264774b3c7c13"],["/pahosler.github.io/static/media/pic-t3.68b9c63a.jpg","68b9c63aee8d85db81e7f9dfa9eba595"],["/pahosler.github.io/static/media/pomodoro-screenshot.740127e4.png","740127e4d77e4d4921832559133d84f7"],["/pahosler.github.io/static/media/quote-machine-screenshot.479d60fe.png","479d60fe070449a4ca4f626fab38c0b8"],["/pahosler.github.io/static/media/recipebox-screenshot.72ba811a.png","72ba811abb67faa7236e18107189f62b"],["/pahosler.github.io/static/media/simon-screenshot.fbd232a4.png","fbd232a42c4e58d1d5b8ee81d6cc20ac"],["/pahosler.github.io/static/media/tictactoe-screenshot.09a02e34.png","09a02e34188aac3943bd29a151d950a7"],["/pahosler.github.io/static/media/web-developer.c05ad562.jpg","c05ad562819d7a05bb55357b0a6611b2"],["/pahosler.github.io/static/media/wiki-viewer-screenshot.a86999b5.png","a86999b536814c1cfc122e23cec9a993"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,t,a,n){var i=new URL(e);return n&&i.pathname.match(n)||(i.search+=(i.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),i.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),i=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),i]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var n=new Request(a,{credentials:"same-origin"});return fetch(n).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching);(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,"index.html"),t=urlsToCacheKeys.has(a));!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(a=new URL("/pahosler.github.io/index.html",self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});